package com.rest.gymapp.controller;

import com.rest.gymapp.dto.request.trainee.TraineeActivationRequest;
import com.rest.gymapp.dto.request.trainee.TraineeRegistrationRequest;
import com.rest.gymapp.dto.request.trainee.TraineeUpdateRequest;
import com.rest.gymapp.dto.request.trainee.UpdateTraineeTrainersRequest;
import com.rest.gymapp.dto.request.training.TraineeTrainingsRequest;
import com.rest.gymapp.dto.response.RegistrationResponse;
import com.rest.gymapp.dto.response.trainee.TraineeProfileResponse;
import com.rest.gymapp.dto.response.trainee.TraineeUpdateResponse;
import com.rest.gymapp.dto.response.trainer.TrainerResponseBasic;
import com.rest.gymapp.dto.response.training.TrainingResponseForTrainee;
import com.rest.gymapp.service.TraineeService;
import io.swagger.annotations.*;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/trainees")
@Api(tags = "Trainee Management")
public class TraineeController {

    private final TraineeService traineeService;
    private static final Logger logger = LoggerFactory.getLogger(TraineeController.class);

    //done
    @ApiOperation(value = "Register a new trainee", notes = "Creates a trainee profile with autogenerated credentials.")
    @ApiResponses({
            @ApiResponse(code = 201, message = "Trainee registered successfully"),
            @ApiResponse(code = 400, message = "Validation failed")
    })
    @PostMapping("/register")
    public ResponseEntity<RegistrationResponse> registerTrainee(
            @Valid @RequestBody TraineeRegistrationRequest req) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] POST /api/trainees/register called: {}", transactionId, req);

        RegistrationResponse response = traineeService.createTraineeProfile(req, transactionId);

        logger.info("[{}] POST /api/trainees/register response: {}", transactionId, response);

        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @ApiOperation(value = "Get trainee profile", notes = "Fetches trainee profile details by username.")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Profile fetched successfully"),
            @ApiResponse(code = 404, message = "Trainee not found"),
            @ApiResponse(code = 401, message = "Invalid credentials")
    })
    @GetMapping("/profile/{username}")
    public ResponseEntity<TraineeProfileResponse> getTrainee(
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password
    ) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] GET /api/trainees/trainee called: {}", transactionId, username);

        TraineeProfileResponse response = traineeService.getTraineeProfileByUsername(username, password, transactionId);

        logger.info("[{}] GET /api/trainees/trainee response: {}", transactionId, response);

        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @ApiOperation(value = "Update trainee profile", notes = "Updates trainee details like name, DOB, and address.")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Profile updated successfully"),
            @ApiResponse(code = 404, message = "Trainee not found")
    })
    @PutMapping("/{username}")
    public ResponseEntity<TraineeUpdateResponse> updateTrainee(
            @Valid @RequestBody TraineeUpdateRequest req,
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] PUT /api/trainees/update-trainee called: {}", transactionId, username);

        TraineeUpdateResponse response = traineeService.updateTraineeProfile(req, username, password, transactionId);

        logger.info("[{}] PUT /api/trainees/update-trainee response: {}", transactionId, response);

        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @ApiOperation(value = "Delete trainee profile", notes = "Deletes the trainee and related records.")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Trainee deleted successfully"),
            @ApiResponse(code = 404, message = "Trainee not found")
    })
    @DeleteMapping("/{username}")
    public ResponseEntity<?> deleteTrainee(
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] DELETE /api/trainees/delete-trainee called: {}", transactionId, username);

        traineeService.deleteTraineeProfile(username, password, transactionId);

        logger.info("[{}] DELETE /api/trainees/delete-trainee response: success", transactionId);

        return ResponseEntity.status(HttpStatus.OK).build();
    }

    @ApiOperation(value = "Get non-assigned trainers", notes = "Lists trainers that are not assigned to this trainee.")
    @GetMapping("/{username}/non-assigned-trainers")
    public ResponseEntity<List<TrainerResponseBasic>> getNonAssignedTrainers(
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password
    ) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] GET /api/trainees/trainee/non-assigned-trainers called: {}", transactionId, username);

        List<TrainerResponseBasic> response = traineeService.findNonAssignedTrainers(username, password, transactionId);

        logger.info("[{}] GET /api/trainees/trainee/non-assigned-trainers response: {}", transactionId, response);

        return ResponseEntity.status(HttpStatus.OK).body(response);
    }

    @ApiOperation(value = "Update trainee trainers", notes = "Assigns additional trainers to trainee.")
    @PutMapping("/{username}/trainers")
    public ResponseEntity<List<TrainerResponseBasic>> updateTrainers(
            @Valid @RequestBody UpdateTraineeTrainersRequest req,
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password
    ) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] PUT /api/trainees/trainee/delete-trainee called: {}", transactionId, username);

        List<TrainerResponseBasic> response = traineeService.updateTraineeTrainers(req, username, password, transactionId);

        logger.info("[{}] PUT /api/trainees/trainee/delete-trainee response: {}", transactionId, response);

        return ResponseEntity.ok(response);
    }

    @ApiOperation(value = "Get trainee trainings", notes = "Fetches trainings by date, trainer name, training type and other criteria")
    @GetMapping("/{username}/trainings")
    public ResponseEntity<List<TrainingResponseForTrainee>> getTraineeTrainings(
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password,
            @RequestParam(required = false) LocalDate fromDate,
            @RequestParam(required = false) LocalDate toDate,
            @RequestParam(required = false) String trainerName,
            @RequestParam(required = false) String trainingTypeName
    ) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] GET /api/trainees/trainee/trainings: {}", transactionId, username);

        List<TrainingResponseForTrainee> response = traineeService.findTraineeTrainings(username, password, fromDate, toDate, trainerName, trainingTypeName, transactionId);

        logger.info("[{}] GET /api/trainees/trainee/trainings response: {}", transactionId, response);

        return ResponseEntity.ok(response);
    }

    @ApiOperation(value = "Change trainee activation status", notes = "Activates or deactivates the trainee profile.")
    @PatchMapping("/{username}/activation")
    public ResponseEntity<?> changeActivationStatus(
            @Valid @RequestBody TraineeActivationRequest req,
            @ApiParam(value = "Trainee username", required = true) @PathVariable String username,
            @ApiParam(value = "Trainee password", required = true) @RequestHeader String password) {

        String transactionId = UUID.randomUUID().toString();
        logger.info("[{}] PATCH /api/trainees/trainee/activate-deactivate called: {}", transactionId, req);

        traineeService.activateDeactivateTrainee(req, username, password, transactionId);

        logger.info("[{}] PATCH /api/trainees/trainee/activate-deactivate response: success", transactionId);

        return ResponseEntity.status(HttpStatus.OK).build();
    }
}
